{"version":3,"sources":["components/settings.js","components/display.js","App.js","serviceWorker.js","index.js"],"names":["Settings","react_default","a","createElement","className","id","onClick","this","props","decreaseBreak","break","increaseBreak","decreaseSession","session","increaseSession","React","Component","Display","minutes","seconds","concat","icon","mode","state","start_pause","reset","timer","defaultState","leftMinutes","leftSeconds","Pomodoro","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","objectSpread","bind","assertThisInitialized","setTimer","playSound","curSettingVal","setState","audioBeep","pause","currentTime","clearInterval","_this2","updateLeftTime","min","sec","timeInSec","setInterval","timeLeft","Math","floor","time","play","_this3","settings","display","preload","src","ref","audio","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ffeb004.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Settings extends React.Component {\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"settings\">\r\n          <div id=\"break-label\">\r\n            <p className=\"setting-name\">Break Length</p>\r\n            <div className=\"break-settings\">\r\n              <button id=\"break-decrement\" className=\"break-btn\" onClick={this.props.decreaseBreak}>\r\n                <i className='fas fa-minus'></i>\r\n              </button>\r\n              <p id=\"break-length\" className=\"setting-value\">{this.props.break}</p>\r\n              <button id=\"break-increment\" className=\"break-btn\" onClick={this.props.increaseBreak}>\r\n                <i className='fas fa-plus'></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div id=\"session-label\">\r\n            <p className=\"setting-name\">Session Length</p>\r\n            <div className=\"session-settings\">\r\n              <button id=\"session-decrement\" className=\"session-btn\" onClick={this.props.decreaseSession}>\r\n                <i className='fas fa-minus'></i>\r\n              </button>\r\n              <p id=\"session-length\" className=\"setting-value\">{this.props.session}</p>\r\n              <button id=\"session-increment\" className=\"session-btn\" onClick={this.props.increaseSession}>\r\n                <i className='fas fa-plus'></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }  \r\n  }\r\n\r\n  export default Settings;","import React from 'react';\r\n\r\nclass Display extends React.Component {\r\n  \r\n    render() { \r\n      let minutes = this.props.minutes;\r\n      let seconds = this.props.seconds;\r\n      if (minutes < 10) {\r\n        minutes = `0${minutes}`;\r\n      } else if (minutes === 0) {\r\n        minutes = '00';\r\n      }\r\n      if (seconds < 10) {\r\n        seconds = `0${seconds}`;\r\n      } else if (seconds === 0) {\r\n        seconds = '00';\r\n      }\r\n      let icon = <i className='fas fa-play'></i>;\r\n      if (this.props.mode === 'started') {\r\n        icon = <i className=\"fa fa-pause\"></i>;\r\n      } else {\r\n        icon = <i className='fas fa-play'></i>;\r\n      }\r\n      return(\r\n        <div className=\"display\">\r\n          <h2 id=\"timer-label\">{this.props.state}</h2>\r\n          <p id=\"time-left\">{`${minutes}:${seconds}`}</p>        \r\n          <div className=\"controls\">\r\n            <button id=\"start_stop\" onClick={this.props.start_pause}>            \r\n              {icon}  \r\n            </button>\r\n            <button id=\"reset\" onClick={this.props.reset}>\r\n              <i className='fas fa-redo-alt'></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default Display;","import React from 'react';\nimport Settings from './components/settings.js';\nimport Display from './components/display.js';\nimport './App.css';\n\nlet timer = null;\nlet defaultState = {\n  session: 25,\n  break: 5,      \n  mode: 'off',\n  state: 'session',\n  leftMinutes: 25,\n  leftSeconds: 0\n};\n\nclass Pomodoro extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {...defaultState}    \n    this.decreaseBreak = this.decreaseBreak.bind(this);\n    this.increaseBreak = this.increaseBreak.bind(this);\n    this.decreaseSession = this.decreaseSession.bind(this);\n    this.increaseSession = this.increaseSession.bind(this);    \n    this.reset = this.reset.bind(this);   \n    this.setTimer = this.setTimer.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.start_pause = this.start_pause.bind(this);\n  }\n  \n  decreaseBreak() {        \n    let curSettingVal = this.state.break;\n    if (this.state.mode === 'off' && curSettingVal > 1) {\n      this.setState({\n        break: curSettingVal - 1\n      });\n    } else if (this.state.mode === 'off' && curSettingVal <= 1) {\n      this.setState({\n        break: curSettingVal\n      });\n    } else {}      \n  }     \n  \n  increaseBreak() {    \n    let curSettingVal = this.state.break;\n    if (this.state.mode === 'off' && curSettingVal < 60) {\n      this.setState({\n        break: curSettingVal + 1\n      });\n    } else if (this.state.mode === 'off' && curSettingVal >= 60) {\n      this.setState({\n        break: curSettingVal\n      });\n    } else {}\n  }\n  \n  decreaseSession() {        \n    let curSettingVal = this.state.session;\n    if (this.state.mode === 'off' && curSettingVal > 1) {\n      this.setState({\n        session: curSettingVal - 1,\n        leftMinutes: curSettingVal - 1\n      });\n    } else if (this.state.mode === 'off' && curSettingVal <= 1) {\n      this.setState({\n        session: curSettingVal,\n        leftMinutes: curSettingVal\n      });\n    } else {}   \n  }\n  \n  increaseSession() {    \n    let curSettingVal = this.state.session;\n    if (this.state.mode === 'off' && curSettingVal < 60) {\n      this.setState({\n        session: curSettingVal + 1,\n        leftMinutes: curSettingVal + 1\n      });\n    } else if (this.state.mode === 'off' && curSettingVal >= 60) {\n      this.setState({\n        session: curSettingVal,\n        leftMinutes: curSettingVal\n      });\n    } else {}    \n  }  \n  \n  reset() {\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n    clearInterval(timer);\n    this.setState({...defaultState});     \n  }  \n  \n  setTimer() {\n    this.setState({\n        mode: 'started'\n      });\n    // this funcs helps to update state inside of inner function\n    let updateLeftTime = (min, sec) => {\n      this.setState({\n        leftMinutes: min,\n        leftSeconds: sec\n      }); \n    }\n    let updateSBState = (state) => {            \n      this.setState(\n        {\n          state: state === 'session'?'break':'session',\n          mode: 'paused'\n        }, () => updateLeftTime(\n          this.state.state==='session'?this.state.session:this.state.break, seconds\n        )  \n      );      \n    };     \n    \n    let minutes = this.state.leftMinutes;\n    let seconds = this.state.leftSeconds;    \n    let timeInSec = minutes * 60 + seconds;\n    \n    // start timer\n    let timerOn = () => {        \n      let timeLeft = timeInSec - 1;   \n      this.playSound(timeLeft);\n      if (timeLeft >= 0) {\n        minutes = Math.floor(timeLeft / 60);\n        seconds = timeLeft % 60; \n        updateLeftTime(minutes, seconds);\n        timeInSec = timeLeft;\n      } else {   \n        clearInterval(timer);            \n        updateSBState(this.state.state);         \n        this.setTimer();\n      }         \n      \n    };\n    timer = setInterval(timerOn, 1000);\n  }\n  \n  playSound(time) {\n    if (time === 0) {\n      this.audioBeep.play();\n    }\n  }\n  \n  start_pause() {  \n    if (this.state.mode === 'off') {                   \n      this.setTimer();        \n    } else if (this.state.mode === 'started') {      \n      this.setState({\n        mode: 'paused'\n      });       \n      clearInterval(timer);      \n    } else if (this.state.mode === 'paused') {\n      this.setTimer();      \n    } \n    \n  }\n  \n  render() {\n    return (\n      <div className=\"pomodoro\">\n        <h1>Pomodoro Clock</h1>\n        <Settings decreaseBreak={this.decreaseBreak} increaseBreak={this.increaseBreak} decreaseSession={this.decreaseSession} increaseSession={this.increaseSession} break={this.state.break} session={this.state.session}/>  \n        <Display mode={this.state.mode} state={this.state.state} minutes={this.state.leftMinutes} seconds={this.state.leftSeconds} reset={this.reset} start_pause={this.start_pause}/>\n        <audio id=\"beep\" preload=\"auto\" \n          src=\"https://goo.gl/65cBl1\"\n          ref={(audio) => { this.audioBeep = audio; }} />\n      </div>\n    )\n  }\n}\n\nexport default Pomodoro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}